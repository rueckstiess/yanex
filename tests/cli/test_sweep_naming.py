"""
Tests for parameter sweep naming functionality.
"""

import pytest

from tests.test_utils import TestDataFactory
from yanex.cli.commands.run import _generate_sweep_experiment_name


class TestSweepExperimentNaming:
    """Test sweep experiment naming functionality."""

    @pytest.mark.parametrize(
        "base_name,config,expected_name",
        [
            # With base name - config is ignored, name returned as-is
            ("train-model", {"lr": 0.001}, "train-model"),
            ("model", {"batch_size": 32}, "model"),
            (
                "train-model",
                {"lr": 0.001, "batch_size": 32, "epochs": 100},
                "train-model",
            ),
            ("test", {"epochs": 100, "batch_size": 32, "hidden_dim": 512}, "test"),
            # No base name - defaults to "sweep"
            (None, {"lr": 0.001, "momentum": 0.9}, "sweep"),
            (None, {"batch_size": 16}, "sweep"),
            # Config parameters don't affect name
            (
                "model",
                {"use_dropout": True, "use_batch_norm": False, "lr": 0.01},
                "model",
            ),
            (
                "train",
                {"model_type": "resnet50", "optimizer": "adam", "lr": 0.001},
                "train",
            ),
            ("test", {"lr": 1.0, "momentum": 0.0}, "test"),
            # Empty config
            ("test", {}, "test"),
            (None, {}, "sweep"),
        ],
    )
    def test_basic_naming_patterns(self, base_name, config, expected_name):
        """Test basic parameter sweep naming patterns - names are returned as-is."""
        result = _generate_sweep_experiment_name(base_name, config)
        assert result == expected_name

    def test_nested_parameter_naming(self):
        """Test naming with nested parameters - config is ignored."""
        config = {
            "model": {"lr": 0.01, "hidden_size": 128},
            "training": {"epochs": 100},
        }
        result = _generate_sweep_experiment_name("test", config)
        # Name is returned as-is, config doesn't affect it
        assert result == "test"

    def test_scientific_notation_formatting(self):
        """Test that scientific notation in config doesn't affect naming."""
        config = {"lr": 1e-4, "weight_decay": 1e-5}
        result = _generate_sweep_experiment_name("model", config)
        # Name is returned as-is
        assert result == "model"

    def test_parameter_order_consistency(self):
        """Test that naming is consistent (config doesn't affect result)."""
        config = {"z_param": 1, "a_param": 2, "m_param": 3}

        name1 = _generate_sweep_experiment_name("test", config)
        name2 = _generate_sweep_experiment_name("test", config)

        # Both should return the same base name
        assert name1 == name2 == "test"

    def test_naming_with_factory_generated_configs(self):
        """Test naming with configurations generated by TestDataFactory."""
        config = TestDataFactory.create_experiment_config(config_type="ml_training")
        result = _generate_sweep_experiment_name("test", config)
        # Config doesn't affect name
        assert result == "test"

    def test_naming_with_complex_ml_config(self):
        """Test naming with complex ML configuration - config is ignored."""
        ml_config = TestDataFactory.create_experiment_config(
            config_type="ml_training",
            dropout_rate=0.1,
            weight_decay=1e-5,
        )

        result = _generate_sweep_experiment_name("ml-experiment", ml_config)
        # Name is returned as-is
        assert result == "ml-experiment"

    def test_naming_edge_cases(self):
        """Test edge cases - config values don't affect naming."""
        edge_cases = [
            {"lr": 0, "momentum": 0.0},
            {"bias": -0.1, "offset": -10},
            {"max_tokens": 1000000, "vocab_size": 50000},
        ]

        for config in edge_cases:
            result = _generate_sweep_experiment_name("edge-test", config)
            # Name is always returned as-is
            assert result == "edge-test"

    def test_naming_with_special_characters_in_values(self):
        """Test that special characters in config don't affect naming."""
        config = {
            "model_path": "/path/to/model",
            "dataset": "dataset-v2.1",
            "tag": "experiment_2024",
        }

        result = _generate_sweep_experiment_name("special", config)
        # Config is ignored
        assert result == "special"

    @pytest.mark.parametrize(
        "base_name_pattern",
        [
            "simple-name",
            "name_with_underscores",
            "name-with-many-dashes",
            "CamelCaseName",
            "name123",
        ],
    )
    def test_naming_with_various_base_name_patterns(self, base_name_pattern):
        """Test that various base name patterns are preserved exactly."""
        config = {"lr": 0.01, "epochs": 10}

        result = _generate_sweep_experiment_name(base_name_pattern, config)
        # Base name is returned exactly as provided
        assert result == base_name_pattern

    def test_sweep_vs_constant_parameter_filtering(self):
        """Test that sweep_param_paths parameter is ignored (backward compatibility)."""
        config = {
            "lr": 0.01,
            "batch_size": 32,
            "epochs": 100,
        }

        sweep_paths = ["lr"]
        result = _generate_sweep_experiment_name("test", config, sweep_paths)

        # Sweep paths are ignored, name is returned as-is
        assert result == "test"

    def test_sweep_vs_constant_parameter_filtering_multiple_sweeps(self):
        """Test that sweep filtering parameter is ignored."""
        config = {
            "lr": 0.01,
            "momentum": 0.9,
            "batch_size": 32,
            "epochs": 100,
            "model": "resnet",
        }

        sweep_paths = ["lr", "momentum"]
        result = _generate_sweep_experiment_name("ml", config, sweep_paths)

        # Name is returned as-is regardless of sweep_paths
        assert result == "ml"

    def test_sweep_vs_constant_parameter_filtering_nested(self):
        """Test that nested sweep paths are ignored."""
        config = {
            "model": {
                "lr": 0.01,
                "architecture": "resnet",
                "layers": 18,
            },
            "training": {
                "epochs": 100,
                "batch_size": 32,
            },
            "optimizer": "adam",
        }

        sweep_paths = ["model.lr", "training.batch_size"]
        result = _generate_sweep_experiment_name("deep", config, sweep_paths)

        # Name is returned as-is
        assert result == "deep"

    def test_sweep_parameter_filtering_backwards_compatibility(self):
        """Test backwards compatibility - config doesn't affect result."""
        config = {
            "lr": 0.01,
            "batch_size": 32,
            "epochs": 100,
        }

        result = _generate_sweep_experiment_name("test", config, None)

        # Name is returned as-is (config ignored)
        assert result == "test"

    def test_sweep_parameter_filtering_empty_sweep_paths(self):
        """Test behavior with empty sweep paths list."""
        config = {
            "lr": 0.01,
            "batch_size": 32,
        }

        result = _generate_sweep_experiment_name("test", config, [])

        # Name is returned as-is
        assert result == "test"

    def test_sweep_parameter_filtering_no_matching_paths(self):
        """Test behavior when sweep paths don't match config."""
        config = {
            "lr": 0.01,
            "batch_size": 32,
        }

        sweep_paths = ["nonexistent", "another_missing"]
        result = _generate_sweep_experiment_name("test", config, sweep_paths)

        # Name is returned as-is
        assert result == "test"
